name: 'Azure Foundation CI Workflow'

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

on:
  push:
    branches:
      - 'feature**'
  workflow_call:
    inputs:
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      infra-working-directory:
        required: false
        type: string
        default: 'infra'
      infra-terraform-version:
        required: false
        type: string
        default: '1.1.9'
      environment:
        required: true
        type: string
        default: 'dev'

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_USE_OIDC: true

jobs:

  terraform-ci:
    name: 'Terraform CI'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}/infra
    env:
    #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      tfplan: ${{ steps.tf-plan.outputs.summary }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: 'az login with oidc'
      uses: azure/login@v1
      with:
        # allow-no-subscriptions: true
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: "1.3.1"

    - name: Terraform Format
      run: terraform fmt -check

    - name: Check Terraform Backend Configuration and Create if Non-EXISTENT
      id: check_backend
      run: |
        tfstate_file=".terraform/terraform.tfstate"
        if [ ! -f "$tfstate_file" ]; then
          # Create RG
          az group create --name BDOTest1 --location brazilsouth
          # Create Storage and container
          az storage account create --name vaaniravinderg01010 --resource-group BDOTest1 --location brazilsouth --sku Standard_LRS --kind StorageV2 --encryption-services blob
          accountKey=$(az storage account keys list --account-name vaaniravinderg01010 --resource-group BDOTest1 --output tsv --query "[0].value")
          az storage container create --name containervaani --account-name vaaniravinderg01010 --account-key $accountKey
          # Enable storage versioning
          az storage account blob-service-properties update --account-name vaaniravinderg01010 --resource-group BDOTest1 --enable-versioning true
          echo "::set-output name=accountKey::$accountKey"
        fi
      shell: bash

    - name: Initialize Terraform Backend
      env:
        ARM_ACCESS_KEY: ${{ steps.check_backend.outputs.accountKey }}
      run: |
        touch backend.tf
        cat <<EOF > backend.tf
        terraform {
          backend "azurerm" {
            storage_account_name = "vaaniravinderg01010"
            container_name       = "containervaani"
            key                  = "terraform.tfstate"
          }
        }
        EOF
        terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      env:
        ARM_ACCESS_KEY: ${{ steps.check_backend.outputs.accountKey }}
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    - name: Terraform Show
      id: show
      shell: bash
      run: terraform show -no-color tfplan 2>&1 > /tmp/plan.txt

    - name: Terraform Apply
      env:
        ARM_ACCESS_KEY: ${{ steps.check_backend.outputs.accountKey }}
      run: terraform apply -input=false tfplan
      shell: bash

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan


  # TO-DO:
  # terrascan policy-as-codes